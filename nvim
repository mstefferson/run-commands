-- Basic Settings
vim.g.mapleader = " "  -- Set leader key to space
vim.g.maplocalleader = " "

-- UI Settings
vim.opt.number = true           -- Line numbers
vim.opt.relativenumber = true   -- Relative line numbers
vim.opt.cursorline = true      -- Highlight current line
vim.opt.signcolumn = "yes"     -- Always show sign column
vim.opt.wrap = false           -- Don't wrap lines
vim.opt.termguicolors = true   -- True color support

-- Indentation for Python
vim.opt.expandtab = true       -- Use spaces instead of tabs
vim.opt.shiftwidth = 4         -- Number of spaces for auto-indent
vim.opt.tabstop = 4           -- Number of spaces a tab counts for
vim.opt.autoindent = true      -- Copy indent from current line when starting new line
vim.opt.smartindent = true     -- Smart autoindenting when starting a new line

-- Search settings
vim.opt.ignorecase = true      -- Ignore case in search patterns
vim.opt.smartcase = true       -- Override ignorecase if search pattern contains uppercase
vim.opt.hlsearch = true        -- Highlight search results
vim.opt.incsearch = true       -- Show search matches as you type

-- Clipboard
vim.opt.clipboard = "unnamedplus"  -- Use system clipboard

-- Some basic quality of life keymaps
vim.keymap.set('n', '<leader>w', ':w<CR>', { desc = 'Save file' })
vim.keymap.set('n', '<leader>q', ':q<CR>', { desc = 'Quit' })
vim.keymap.set('n', '<leader>h', ':nohlsearch<CR>', { desc = 'Clear search highlight' })

-- Plugin Management
local Plug = vim.fn['plug#']

vim.call('plug#begin', '~/.config/nvim/plugged')

Plug('neoclide/coc.nvim', {branch = 'release'})
Plug('tpope/vim-fugitive')
Plug('preservim/nerdtree')
Plug('junegunn/fzf', { ['do'] = vim.fn['fzf#install'] })
Plug('junegunn/fzf.vim')
Plug('vim-airline/vim-airline')
Plug('vim-airline/vim-airline-themes')
Plug('tpope/vim-commentary')
Plug('tpope/vim-surround')
Plug('NLKNguyen/papercolor-theme')

vim.call('plug#end')

-- Basic settings for PaperColor theme
vim.opt.background = 'light'  -- or 'dark' for dark mode
--vim.opt.termguicolors = true -- Enable true color support

-- Load and configure the colorscheme
vim.cmd([[
try
  colorscheme PaperColor
catch /^Vim\%((\a\+)\)\=:E185/
  colorscheme default
  set background=dark
endtry
]])

-- Optional: Additional PaperColor customizations
vim.g.PaperColor_Theme_Options = {
  theme = {
    default = {
      transparent_background = false,
      allow_bold = true,
      allow_italic = true
    }
  }
}

-- Optional: Status line configuration for PaperColor
vim.opt.number = true
vim.opt.laststatus = 2
vim.opt.showmode = false

-- Optional: Set airline theme if you're using vim-airline
vim.g.airline_theme = 'papercolor'


-- Folding settings
-- zM: fold all
-- zR: open all
-- zc: fold on cursor
-- za: toggle on cursor
-- zo: open on cursor
vim.opt.foldmethod = 'indent'  -- Fold based on indentation
vim.opt.foldnestmax = 10      -- Maximum fold depth
vim.opt.foldenable = false    -- Start with folds opened
vim.opt.foldlevel = 2         -- Default fold level

-- CoC Configuration
-- Some servers have issues with backup files
vim.opt.backup = false
vim.opt.writebackup = false

-- Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
-- delays and poor user experience.
vim.opt.updatetime = 300

-- Always show the signcolumn, otherwise it would shift the text
vim.opt.signcolumn = "yes"

-- CoC keymap settings
local keyset = vim.keymap.set

-- Use tab for trigger completion with characters ahead and navigate
function _G.check_back_space()
    local col = vim.fn.col('.') - 1
    return col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') ~= nil
end

local opts = {silent = true, noremap = true, expr = true, replace_keycodes = false}
keyset("i", "<TAB>", 'coc#pum#visible() ? coc#pum#next(1) : v:lua.check_back_space() ? "<TAB>" : coc#refresh()', opts)
keyset("i", "<S-TAB>", [[coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"]], opts)

-- Make <CR> to accept selected completion item or notify coc.nvim to format
keyset("i", "<cr>", [[coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"]], opts)

-- GoTo code navigation
keyset("n", "gd", "<Plug>(coc-definition)", {silent = true})
keyset("n", "gy", "<Plug>(coc-type-definition)", {silent = true})
keyset("n", "gi", "<Plug>(coc-implementation)", {silent = true})
keyset("n", "gr", "<Plug>(coc-references)", {silent = true})


-- Use K to show documentation in preview window
function _G.show_docs()
    local cw = vim.fn.expand('<cword>')
    if vim.fn.index({'vim', 'help'}, vim.bo.filetype) >= 0 then
        vim.api.nvim_command('h ' .. cw)
    elseif vim.api.nvim_eval('coc#rpc#ready()') then
        vim.fn.CocActionAsync('doHover')
    else
        vim.api.nvim_command('!' .. vim.o.keywordprg .. ' ' .. cw)
    end
end

keyset("n", "K", '<CMD>lua _G.show_docs()<CR>', {silent = true})

-- isort on Save
-- Add auto-command for Python files
vim.api.nvim_create_autocmd("BufWritePre", {
    pattern = "*.py",
    callback = function()
        vim.fn.CocAction('runCommand', 'python.sortImports')
        vim.fn.CocAction('format')
    end,
})

-- FZF Configuration
-- Use ripgrep if available
if vim.fn.executable('rg') == 1 then
    vim.env.FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
end

-- FZF keymaps
vim.keymap.set('n', '<leader>sf', '<cmd>Files<CR>', { desc = 'FZF find files' })
vim.keymap.set('n', '<leader>sb', '<cmd>Buffers<CR>', { desc = 'FZF find buffers' })
vim.keymap.set('n', '<leader>st', '<cmd>Rg<CR>', { desc = 'FZF ripgrep' })
vim.keymap.set('n', '<leader>s/', '<cmd>BLines<CR>', { desc = 'FZF find in current buffer' })

-- NERDTree Configuration


-- Fugitive keymaps
-- Git status
vim.keymap.set('n', '<leader>gs', ':Git<CR>', { desc = 'Git status' })
-- Git add current file
vim.keymap.set('n', '<leader>ga', ':Gwrite<CR>', { desc = 'Git add current file' })
-- Git commit
vim.keymap.set('n', '<leader>gc', ':Git commit<CR>', { desc = 'Git commit' })
-- Git push
vim.keymap.set('n', '<leader>gp', ':Git push<CR>', { desc = 'Git push' })
-- Git diff
vim.keymap.set('n', '<leader>gd', ':Gdiffsplit<CR>', { desc = 'Git diff' })
-- Git blame
vim.keymap.set('n', '<leader>gb', ':Git blame<CR>', { desc = 'Git blame' })
-- Pretty Git log
vim.keymap.set('n', '<leader>gl', ':Git log --pretty=format:"%C(yellow)%h %Cred%an %Cblue%ad %Cgreen%d %Creset%s" --date=relative --graph<CR>', { desc = 'Git pretty log' })

-- NERDTree keymaps
vim.keymap.set('n', '<leader>n', ':NERDTreeToggle<CR>', { desc = 'Toggle NERDTree' })
vim.keymap.set('n', '<leader>nf', ':NERDTreeFind<CR>', { desc = 'Find current file in NERDTree' })


-- Commentary keymaps
vim.keymap.set('n', '<leader>c', 'gcc', { remap = true, desc = 'Comment/uncomment line' })
vim.keymap.set('v', '<leader>c', 'gc', { remap = true, desc = 'Comment/uncomment selection' })
